create table if not exists MPA
(
    RATING_ID INTEGER                not null
        primary key,
    NAME      CHARACTER VARYING(255) not null
);

create table if not exists GENRES
(
    GENRE_ID INTEGER                not null
        primary key,
    NAME     CHARACTER VARYING(100) not null
);

create table if not exists FILMS
(
    FILM_ID     BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME        CHARACTER VARYING(255) not null,
    DESCRIPTION CHARACTER VARYING(200) not null,
    RELEASEDATE DATE,
    DURATION    INTEGER                not null,
    GENRE_ID    INTEGER                not null,
    RATING_ID   INTEGER                not null,
    constraint FILMS_RATING_ID_FOREIGN
        foreign key (RATING_ID) references MPA
);


create table if not exists FILM_GENRE
(
    FILM_ID  BIGINT not null,
    GENRE_ID INTEGER not null,
    primary key (FILM_ID, GENRE_ID),
    constraint FILM_GENRE_FILM_ID_FOREIGN
        foreign key (FILM_ID) references FILMS,
    constraint FILM_GENRE_GENRE_ID_FOREIGN
        foreign key (GENRE_ID) references GENRES
);



create table if not exists USERS
(
    USER_ID  BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    EMAIL    CHARACTER VARYING(255) not null,
    LOGIN    CHARACTER VARYING(255) not null,
    NAME     CHARACTER VARYING(255),
    BIRTHDAY DATE
);


create table if not exists FRIENDS
(
    USER_ID   BIGINT not null,
    FRIEND_ID INTEGER not null,
    primary key (FRIEND_ID, USER_ID),
    constraint FRIENDS_FRIEND_ID_FOREIGN
        foreign key (FRIEND_ID) references USERS,
    constraint FRIENDS_USER_ID_FOREIGN
        foreign key (USER_ID) references USERS
);


create table if not exists LIKES
(
    FILM_ID BIGINT not null,
    USER_ID INTEGER not null,
    primary key (FILM_ID, USER_ID),
    constraint LIKES_FILM_ID_FOREIGN
        foreign key (FILM_ID) references FILMS,
    constraint LIKES_USER_ID_FOREIGN
        foreign key (USER_ID) references USERS
);

